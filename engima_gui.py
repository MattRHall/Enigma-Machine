# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'engima_gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import os
from PyQt5 import QtCore, QtGui, QtWidgets, uic
from enigma import *
from PyQt5.QtWidgets import QMessageBox

qtCreator_file = "engima_gui.ui"
Ui_MainWindow, QtBaseClass = uic.loadUiType(qtCreator_file)

class MyWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()

        QtWidgets.QMainWindow.__init__(self)
        Ui_MainWindow.__init__(self)
        self.setupUi(self)

        # Reset button press
        self.resetbutton.clicked.connect(self.reset_all)

        # Setup radio buttons
        self.radiobutt4.toggled.connect(self.rotor4_on_off)
        self.radiobutt3.toggled.connect(self.rotor4_on_off)

        # Setup Menu
        self.reset1.triggered.connect(self.reset_all)
        self.encode1.triggered.connect(self.engima_run)
        
        # Encode button press
        self.encodebutton.clicked.connect(self.engima_run)

    def rotor4_on_off(self):
        if self.radiobutt4.isChecked() == True:
            self.cb4.setEnabled(True)
            self.startpos4.setEnabled(True)
            self.ringpos4.setEnabled(True)
        else:
            self.cb4.setEnabled(False)
            self.startpos4.setEnabled(False)
            self.ringpos4.setEnabled(False)

    def reset_all(self):
        self.cb4.setCurrentIndex(0)
        self.cb3.setCurrentIndex(0)
        self.cb2.setCurrentIndex(0)
        self.cb1.setCurrentIndex(0)
        self.startpos4.setCurrentIndex(0)
        self.startpos3.setCurrentIndex(0)
        self.startpos2.setCurrentIndex(0)
        self.startpos1.setCurrentIndex(0)
        self.ringpos4.setValue(0)
        self.ringpos3.setValue(0)
        self.ringpos2.setValue(0)
        self.ringpos1.setValue(0)
        self.ref_input.setCurrentIndex(0)
        self.Pb_input.setText("")
        self.input_box.setText("")
        self.output_box.clear()

    def engima_run(self):
        
        # Setup rotors
        r4 = Rotor(self.cb4.currentText(), 
                    self.startpos4.currentText(),
                    int(self.ringpos4.text()), pawl = False)
        r3 = Rotor(self.cb3.currentText(), 
                    self.startpos3.currentText(),
                    int(self.ringpos3.text()), pawl = False)
        r2 = Rotor(self.cb2.currentText(), 
                    self.startpos2.currentText(),
                    int(self.ringpos2.text()), pawl = True)
        r1 = Rotor(self.cb1.currentText(), 
                    self.startpos1.currentText(),
                    int(self.ringpos1.text()), pawl = True)

        # Setup plugboard
        pb = Plugboard()
        if self.Pb_input.text():
            leads = self.Pb_input.text().split(" ")
            for lead in leads:
                if isinstance(lead, str) == False:
                    self.plugboard_error_popup("non-string inputs")
                if len(lead) != 2:
                    self.plugboard_error_popup("only string inputs length 2")
                if lead.isupper() == False or lead.isalpha() == False:
                    self.plugboard_error_popup("non-alphabetical or lowercase letters present")
                if len(lead) == 2 and lead[0] == lead[1]:
                    self.plugboard_error_popup("Two letters are the same")
                pb.add(PlugLead(lead))
            print(pb.plug_dict)

        # Setup Rotorspindle
        if self.radiobutt4.isChecked() == True:
            rotor = Rotor_spindle(r4, r3, r2, r1)
        else:
            rotor = Rotor_spindle(r3, r2, r1)

        # Setup Reflector
        reflector = Reflector(self.ref_input.currentText())

        # Build machine
        E = Enigma_machine(rotor, reflector, pb)

        # Get result from encoding (remove lines and spaces)
        text = self.input_box.toPlainText()
        text = text.replace("\n","")
        text = text.replace(" ", "")
        for letter in text:
            if letter.upper() not in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
                self.input_error_popup()
        out_text = E.encode(text)
        self.output_box.setText(str(out_text))

    def plugboard_error_popup(self, error_type):
        msg = QMessageBox()
        msg.setWindowTitle("Plugboard Error")
        msg.setText(f"There is an error with {error_type} on the plugboard.\n"
                    "Please investigate.")
        msg.exec_()

    def input_error_popup(self):
        msg = QMessageBox()
        msg.setWindowTitle("There is an Error!")
        msg.setText("You have used invalid characters in the input box \n"
                    "Please reconsider your choices and try again.")
        msg.exec_()

if __name__ == "__main__":

    # Ensure scaling is correct. Pass through argv to application/
    os.environ["QT_AUTO_SCREEN_SCALE_FACTOR"] = "1"
    app = QtWidgets.QApplication(sys.argv)
    app.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)

    # Create window GUI object. Show it. 
    window = MyWindow()
    window.show()
    sys.exit(app.exec_())